class Solution {
public:
    vector<int> leftmostBuildingQueries(vector<int>& heights, vector<vector<int>>& queries) {
        int n=heights.size();
        vector<int> next(n);
        stack<int> st;
        st.push(-1);
        for(int i=n-1;i>=0;i--){
            while(st.top()!=-1 && heights[st.top()]<=heights[i]){
                st.pop();
            }
            next[i]=st.top();
            st.push(i);
        }

        vector<int> ans;
        for(auto q:queries){
            if(q[0]>q[1]) {swap(q[0],q[1]);}
            if(q[0]==q[1]) {ans.push_back(q[0]);}
            else if(heights[q[0]]<heights[q[1]]) {ans.push_back(q[1]);}
            else if(next[q[0]]==-1 || next[q[1]]==-1) {ans.push_back(-1);}
            else{
                int i=next[q[1]];
                while(i>=0 && i<n && heights[q[0]]>=heights[i]){
                    i=next[i];
                }
                ans.push_back(i);
            }
        }
        return ans;
    }
};
