class Solution {
public:
    int minimumTime(vector<vector<int>>& grid) {
        if (grid[0][1] > 1 && grid[1][0] > 1)
            return -1;
        vector<int> di = {0, 0, -1, 1};
        vector<int> dj = {-1, 1, 0, 0};
        int n = grid.size(), m = grid[0].size();
        vector<vector<int>>t(n, vector<int>(m, INT_MAX));
        set<vector<int>>ms;
        ms.insert({0, 0, 0});
        while(!ms.empty()) {
            auto top = *ms.begin();
            ms.erase(ms.begin());
            for (int k = 0; k < 4; k++) {
                int ii = top[1] + di[k];
                int jj = top[2] + dj[k];
                if (!(ii >= 0 && ii < n && jj >= 0 && jj < m))
                    continue;
                if (grid[ii][jj] <= top[0] + 1) {
                    if(t[ii][jj] > top[0] + 1) {
                        t[ii][jj] = top[0] + 1;
                        ms.insert({t[ii][jj], ii, jj});
                    }
                    continue;
                }
                int diff = grid[ii][jj] - top[0];
                int min_ii_jj = diff % 2 == 0 ? grid[ii][jj] + 1 : grid[ii][jj];
                if (t[ii][jj] > min_ii_jj) {
                    t[ii][jj] = min_ii_jj;
                    ms.insert({min_ii_jj, ii, jj});
                }
            }
        }
        return t[n-1][m-1];
    }
};
