class Solution {
public:
int orValue(vector<int>&bits){
    int ans=0;
    for(int i=0;i<31;i++){
        if(bits[i]>=1){
            ans+= 1<<i;
        }
    }
    return ans;
}
void IncresePointer(vector<int>&bits,int num){
    int i=0;
    while(num>0){
        if(num & 1){
            bits[i]++;
        }
        i++;
        num=num>>1;
    }
}
void DecreasePointer(vector<int>&bits,int num){
    int i=0;
    while(num>0){
        if(num & 1){
            bits[i]--;
        }
        i++;
        num=num>>1;
    }
}
    int minimumSubarrayLength(vector<int>& nums, int k) {
        int i=0;
        int j=0;
        int ans=INT_MAX;
        vector<int> bits(31,0);
        while(j<nums.size()){
            IncresePointer(bits,nums[j]);
            int val= orValue(bits);
            if(val>=k){
                ans= min(ans,j-i+1);
                while(i<j){
                    DecreasePointer(bits,nums[i]);
                    int val= orValue(bits);
                    i++;
                    if(val<k) break;
                    ans= min(ans,j-i+1);
                }
            }
            j++;
        }
        if(ans==INT_MAX) return -1;
        return ans;
    }
};
