static bool fast = []()
{
    std::cin.tie(0)->sync_with_stdio(false);
    return true;
}();

class Solution
{
public:
    long long findScore(vector<int>& nums)
    {
        long long score = 0LL;

        std::vector<bool> marked(nums.size(), false);

        auto pq_comp = [](const std::pair<int, int>& a, const std::pair<int, int>& b) {
            if (a.first != b.first)
                return a.first > b.first;
            return a.second > b.second;
        };

        std::priority_queue<std::pair<int, int>, std::vector<std::pair<int, int>>, decltype(pq_comp)> pq;
        for (int i = 0; i < nums.size(); i++)
        {
            pq.push({nums[i], i});
        }

        while (!pq.empty())
        {
            std::pair<int, int> cur = pq.top();
            pq.pop();

            if (!marked[cur.second])
            {
                marked[cur.second] = true;
                marked[std::max(0, cur.second - 1)] = true;
                marked[std::min((int)nums.size() - 1, cur.second + 1)] = true;

                score += cur.first;
            }
        }

        return score;
    }
};
